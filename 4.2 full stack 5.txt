1. package.json
{
  "name": "student-mvc",
  "version": "1.0.0",
  "main": "app.js",
  "scripts": {
    "start": "node app.js",
    "dev": "nodemon app.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "helmet": "^7.0.0",
    "mongoose": "^7.6.1",
    "morgan": "^1.10.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}

2. .env
PORT=4000
MONGO_URI=mongodb://127.0.0.1:27017/studentdb

3. app.js

require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const morgan = require('morgan');
const helmet = require('helmet');
const cors = require('cors');

const studentRoutes = require('./routes/students');
const courseRoutes = require('./routes/courses');
const enrollmentRoutes = require('./routes/enrollments');

const app = express();

app.use(helmet());
app.use(cors());
app.use(morgan('dev'));
app.use(express.json());

app.use('/api/students', studentRoutes);
app.use('/api/courses', courseRoutes);
app.use('/api/enrollments', enrollmentRoutes);

app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(err.status || 500).json({ error: err.message || 'Internal Server Error' });
});

const PORT = process.env.PORT || 4000;

mongoose.connect(process.env.MONGO_URI)
  .then(() => {
    console.log('✅ MongoDB Connected');
    app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));
  })
  .catch(err => console.error('❌ Mongo Error:', err));

4. Models
models/Student.js
const mongoose = require('mongoose');

const StudentSchema = new mongoose.Schema({
  firstName: { type: String, required: true },
  lastName: { type: String, required: true },
  email: { type: String, unique: true, required: true },
  rollNo: { type: String, unique: true, required: true },
  department: String,
  year: Number,
  courses: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Course' }],
  createdAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Student', StudentSchema);

models/Course.js
const mongoose = require('mongoose');

const CourseSchema = new mongoose.Schema({
  code: { type: String, required: true, unique: true },
  title: { type: String, required: true },
  description: String,
  credits: { type: Number, default: 3 },
  department: String,
  createdAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Course', CourseSchema);

models/Enrollment.js
const mongoose = require('mongoose');

const EnrollmentSchema = new mongoose.Schema({
  student: { type: mongoose.Schema.Types.ObjectId, ref: 'Student', required: true },
  course: { type: mongoose.Schema.Types.ObjectId, ref: 'Course', required: true },
  semester: String,
  enrolledAt: { type: Date, default: Date.now }
});

EnrollmentSchema.index({ student: 1, course: 1 }, { unique: true });

module.exports = mongoose.model('Enrollment', EnrollmentSchema);


5. Controllers
controllers/studentController.js
const Student = require('../models/Student');

exports.createStudent = async (req, res, next) => {
  try {
    const student = await Student.create(req.body);
    res.status(201).json(student);
  } catch (err) { next(err); }
};

exports.getStudent = async (req, res, next) => {
  try {
    const student = await Student.findById(req.params.id).populate('courses');
    if (!student) return res.status(404).json({ message: 'Not found' });
    res.json(student);
  } catch (err) { next(err); }
};

exports.updateStudent = async (req, res, next) => {
  try {
    const student = await Student.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!student) return res.status(404).json({ message: 'Not found' });
    res.json(student);
  } catch (err) { next(err); }
};

exports.deleteStudent = async (req, res, next) => {
  try {
    const student = await Student.findByIdAndDelete(req.params.id);
    if (!student) return res.status(404).json({ message: 'Not found' });
    res.json({ message: 'Deleted successfully' });
  } catch (err) { next(err); }
};

exports.listStudents = async (req, res, next) => {
  try {
    const students = await Student.find().populate('courses');
    res.json(students);
  } catch (err) { next(err); }
};

controllers/courseController.js
const Course = require('../models/Course');

exports.createCourse = async (req, res, next) => {
  try {
    const course = await Course.create(req.body);
    res.status(201).json(course);
  } catch (err) { next(err); }
};

exports.getCourses = async (req, res, next) => {
  try {
    const courses = await Course.find();
    res.json(courses);
  } catch (err) { next(err); }
};

controllers/enrollmentController.js
const Enrollment = require('../models/Enrollment');
const Student = require('../models/Student');

exports.enrollStudent = async (req, res, next) => {
  try {
    const { studentId, courseId, semester } = req.body;

    const existing = await Enrollment.findOne({ student: studentId, course: courseId });
    if (existing) return res.status(409).json({ message: 'Already enrolled' });

    const enrollment = await Enrollment.create({ student: studentId, course: courseId, semester });
    await Student.findByIdAndUpdate(studentId, { $addToSet: { courses: courseId } });

    res.status(201).json(enrollment);
  } catch (err) { next(err); }
};


6. Routes
routes/students.js
const express = require('express');
const router = express.Router();
const ctrl = require('../controllers/studentController');

router.post('/', ctrl.createStudent);
router.get('/', ctrl.listStudents);
router.get('/:id', ctrl.getStudent);
router.put('/:id', ctrl.updateStudent);
router.delete('/:id', ctrl.deleteStudent);

module.exports = router;

routes/courses.js
const express = require('express');
const router = express.Router();
const ctrl = require('../controllers/courseController');

router.post('/', ctrl.createCourse);
router.get('/', ctrl.getCourses);

module.exports = router;

routes/enrollments.js
const express = require('express');
const router = express.Router();
const ctrl = require('../controllers/enrollmentController');

router.post('/', ctrl.enrollStudent);

module.exports = router;

